% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mk_simplex_grid.R
\name{mk_simplex_grid}
\alias{mk_simplex_grid}
\title{Create a grid on a m-dim simplex}
\usage{
mk_simplex_grid(dim, step_size = 0.1, nc = detectCores() - 1, rm_edges = FALSE)
}
\arguments{
\item{dim}{the dimension of the simplex. This will be the number of columns in the returned data}

\item{step_size}{(default 0.1) the increments in each of the compositions/axes to be enumerated}

\item{nc}{(default \code{detectCores() - 1}) the number of cores to use. The default uses 1 less than the cores detected by R. \code{nc = 1} will be quickest for small \code{dim} (say, \code{dim} < 6) but multicore performance is far superior for \code{dim} larger (or smaller \code{step_size}).}

\item{rm_edges}{(default \code{FALSE}) should points in the grid that lie on the edge of the simplex be removed (i.e., points that contain 0 or 1 values)?}
}
\description{
Create a grid on a m-dim simplex, enumerating all points spaced by \code{step_size}
}
\details{
Returns a matrix with \code{dim} columns and n rows that is increasingly large for increasing \code{dim}.
Below is a table of the row numbers and time taken (in sec) to run \code{mk_simplex_grid()} using 1- and 5-cores (6-core Intel i5-8400) for a \code{step_size} of 0.1 (default) and \code{dim} dimensions

\tabular{rrrrr}{
  \code{dim} \tab \code{step_size} \tab n rows \tab time (sec), \code{nc=1} \tab time (sec), \code{nc=5} \cr
  2 \tab 0.1 \tab 11 \tab 0.004 \tab 1.366 \cr
  3 \tab 0.1 \tab 66 \tab 0.039 \tab 1.473 \cr
  4 \tab 0.1 \tab 286 \tab 0.248 \tab 1.487 \cr
  5 \tab 0.1 \tab 1001 \tab 1.131 \tab 1.709 \cr
  6 \tab 0.1 \tab 3003 \tab 4.168 \tab 2.668 \cr
  7 \tab 0.1 \tab 8008 \tab 13.549 \tab 5.958 \cr
  8 \tab 0.1 \tab 19448 \tab 38.434 \tab 15.077 \cr
  9 \tab 0.1 \tab 43758 \tab 97.613 \tab 40.358 \cr
  10 \tab 0.1 \tab 92378 \tab 217.436 \tab 100.434
}
}
\examples{
### to pass package checks, 1 core only used for these below examples
mk_simplex_grid(2, nc = 1)
mk_simplex_grid(2, 0.05, nc = 1)
mk_simplex_grid(3, 0.2, rm_edges = FALSE, nc = 1)
mk_simplex_grid(3, 0.2, rm_edges = TRUE, nc = 1)
mk_simplex_grid(5, 0.5, nc = 1)
nrow(mk_simplex_grid(2, nc = 1))
system.time(mk_simplex_grid(2, nc = 1))

### on multi-core systems, can try these examples to use n-1 cores:
# mk_simplex_grid(2, 0.05)
# mk_simplex_grid(3, 0.2, rm_edges = FALSE)
# mk_simplex_grid(3, 0.2, rm_edges = TRUE)
# mk_simplex_grid(5, 0.5)
}
\author{
Ty Stanford <tystan@gmail.com>
}
